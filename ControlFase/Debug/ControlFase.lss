
ControlFase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000281  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000281  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a03  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b4  00000000  00000000  00000cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ca  00000000  00000000  000013ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014d  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001be  000001be  00000272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000030  00000120  00000120  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 0000002c  00000150  00000150  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 0000002c  0000017c  0000017c  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_5 00000058  000000c8  000000c8  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.counter  00000001  00800100  00800100  00000281  2**0
                  ALLOC
 19 .data.fase_control 00000001  00800101  000001cc  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .text.__dummy_fini 00000002  000001c6  000001c6  0000027a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  000001c8  000001c8  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  000001ca  000001ca  0000027e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  000001a8  000001a8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  000001c2  000001c2  00000276  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_1>
   8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_2>
   c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_etext>
  18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 01       	movw	r16, r0
  6e:	01 01       	movw	r0, r2
  70:	02 00       	.word	0x0002	; ????
  72:	01 cc       	rjmp	.-2046   	; 0xfffff876 <__eeprom_end+0xff7ef876>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 90 00 	call	0x120	; 0x120 <main>
  c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

000001be <__bad_interrupt>:
 1be:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000120 <main>:
uint8_t counter = 0;

/* Main function */
int main(void)
{
    cli(); /* Global interruption clear */
 120:	f8 94       	cli
	
	/* PCICR – Pin Change Interrupt Control Register */
	PCICR |= (1 << PCIE2);
 122:	e8 e6       	ldi	r30, 0x68	; 104
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	80 83       	st	Z, r24
	/* PCMSK2 – Pin Change Mask Register 2 */
	PCMSK2 |= (1 << PCINT16); /* Pin D0 */
 12c:	ed e6       	ldi	r30, 0x6D	; 109
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
	
	/* EICRA – External Interrupt Control Register A */
	EICRA |= ((1 << ISC11) | (1 << ISC01)); /* The falling edge of INT1 and INT0 generates an interrupt request */
 136:	e9 e6       	ldi	r30, 0x69	; 105
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8a 60       	ori	r24, 0x0A	; 10
 13e:	80 83       	st	Z, r24
	/* EIMSK – External Interrupt Mask Register */
	EIMSK |= ((1 << INT1) | (1 << INT0)); /* PIN D2 & PIN D3 */
 140:	8d b3       	in	r24, 0x1d	; 29
 142:	83 60       	ori	r24, 0x03	; 3
 144:	8d bb       	out	0x1d, r24	; 29
	
	DDRC |= (1 << DDC5); /* Trigger in Pin C5 */
 146:	87 b1       	in	r24, 0x07	; 7
 148:	80 62       	ori	r24, 0x20	; 32
 14a:	87 b9       	out	0x07, r24	; 7
	
	sei (); /* Global interruption enable */
 14c:	78 94       	sei
 14e:	ff cf       	rjmp	.-2      	; 0x14e <main+0x2e>

Disassembly of section .text.__vector_1:

00000150 <__vector_1>:
    }
}

/* Push button UP */
ISR (INT0_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
	fase_control--;
 15c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fase_control>
 160:	81 50       	subi	r24, 0x01	; 1
 162:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <fase_control>
	if (fase_control <= 1)
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	18 f4       	brcc	.+6      	; 0x170 <__vector_1+0x20>
	{
		fase_control = 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <fase_control>
	}
}
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

Disassembly of section .text.__vector_2:

0000017c <__vector_2>:
/* Push button DOW */
ISR (INT1_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
	fase_control++;
 188:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fase_control>
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <fase_control>
	if (fase_control >= 9)
 192:	89 30       	cpi	r24, 0x09	; 9
 194:	18 f0       	brcs	.+6      	; 0x19c <__vector_2+0x20>
	{
		fase_control = 9;
 196:	89 e0       	ldi	r24, 0x09	; 9
 198:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <fase_control>
	}
}
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

Disassembly of section .text.__vector_5:

000000c8 <__vector_5>:

/* Zero crossing */
ISR (PCINT2_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	for (counter = 0; counter < fase_control; counter++)
  d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	0b c0       	rjmp	.+22     	; 0xf2 <__vector_5+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	89 e3       	ldi	r24, 0x39	; 57
  de:	97 e0       	ldi	r25, 0x07	; 7
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <__vector_5+0x18>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <__vector_5+0x1e>
  e6:	00 00       	nop
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fase_control>
  fa:	98 17       	cp	r25, r24
  fc:	78 f3       	brcs	.-34     	; 0xdc <__vector_5+0x14>
	{
		_delay_us(925);
	}
	
	/* Trigger */
	PORTC |= (1 << PORTC5);
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	80 62       	ori	r24, 0x20	; 32
 102:	88 b9       	out	0x08, r24	; 8
 104:	95 e8       	ldi	r25, 0x85	; 133
 106:	9a 95       	dec	r25
 108:	f1 f7       	brne	.-4      	; 0x106 <__vector_5+0x3e>
 10a:	00 00       	nop
	_delay_us(50);
	PORTC &= ~(1 << PORTC5);
 10c:	88 b1       	in	r24, 0x08	; 8
 10e:	8f 7d       	andi	r24, 0xDF	; 223
 110:	88 b9       	out	0x08, r24	; 8
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

Disassembly of section .text.__dummy_fini:

000001c6 <_fini>:
 1c6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001c8 <__funcs_on_exit>:
 1c8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001ca <__simulator_exit>:
 1ca:	08 95       	ret

Disassembly of section .text.exit:

000001a8 <exit>:
 1a8:	ec 01       	movw	r28, r24
 1aa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__funcs_on_exit>
 1ae:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_fini>
 1b2:	ce 01       	movw	r24, r28
 1b4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__simulator_exit>
 1b8:	ce 01       	movw	r24, r28
 1ba:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Exit>

Disassembly of section .text._Exit:

000001c2 <_Exit>:
 1c2:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
